package sep490.com.example.hrms_backend.service.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import sep490.com.example.hrms_backend.dto.NotificationDto;
import sep490.com.example.hrms_backend.entity.Account;
import sep490.com.example.hrms_backend.entity.Employee;
import sep490.com.example.hrms_backend.entity.Notification;
import sep490.com.example.hrms_backend.enums.NotificationType;
import sep490.com.example.hrms_backend.mapper.NotificationMapper;
import sep490.com.example.hrms_backend.repository.AccountRepository;
import sep490.com.example.hrms_backend.repository.EmployeeRepository;
import sep490.com.example.hrms_backend.repository.NotificationRepository;
import sep490.com.example.hrms_backend.service.NotificationService;
import sep490.com.example.hrms_backend.websocket.NotificationWebSocketSender;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

@Service
@RequiredArgsConstructor
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepository;
    private final AccountRepository accountRepository;
    private final EmployeeRepository employeeRepository;
    private final NotificationWebSocketSender notificationWebSocketSender;

    @Override
    public Notification addNotification(NotificationType type, Account sender, Set<Account> recipients) {

        String content;
        String title;
        switch (type) {
            case LEAVE_REQUEST:
                title = "ƒê∆°n xin ngh·ªâ ph√©p m·ªõi";
                content = "Nh√¢n vi√™n " + sender.getEmployee().getEmployeeName() + " v·ª´a g·ª≠i ƒë∆°n xin ngh·ªâ ph√©p.";
                break;
            case APPROVAL:
                title = "Y√™u c·∫ßu duy·ªát ƒë∆°n m·ªõi";
                content = "Nh√¢n vi√™n " + sender.getEmployee().getEmployeeName() + " v·ª´a g·ª≠i ƒë∆°n.";
                break;

            case INTERVIEW_SCHEDULE:
                title = "ƒê∆°n ph·ªèng v·∫•n";
                content = "Nh√¢n vi√™n " + sender.getEmployee().getEmployeeName() + " v·ª´a t·∫°o l·ªãch ph·ªèng v·∫•n.";
                break;

            case SHIFT_CHANGED:
                title = "C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác";
                content = "Nh√¢n vi√™n " + sender.getEmployee().getEmployeeName() + " v·ª´a c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác";
                break;
            default:
                title = "Th√¥ng b√°o m·ªõi";
                content = "B·∫°n c√≥ m·ªôt th√¥ng b√°o m·ªõi t·ª´ h·ªá th·ªëng.";
                break;
        }

        Notification notification = Notification.builder()
                .type(type)
                .content(content)
                .isRead(false)
                .createdAt(LocalDateTime.now())
                .account(recipients)
                .build();

        Notification saved = notificationRepository.save(notification);

        NotificationDto dto = NotificationMapper.toDto(saved);
        notificationWebSocketSender.sendToAccounts(recipients, dto); // üî• G·ª≠i WebSocket

        return saved;    }

    @Override
    public List<NotificationDto> getNotification(Long employeeId) {

        Account account = accountRepository.findByEmployee_EmployeeId(employeeId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n cho nh√¢n vi√™n"));

        Set<Notification> notificationList = account.getNotifications();

        // S·∫Øp x·∫øp theo createdAt gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
        return notificationList.stream()
                .sorted((n1, n2) -> n2.getCreatedAt().compareTo(n1.getCreatedAt()))
                .map(NotificationMapper::toDto)
                .toList();
    }


    @Transactional
    public void markAsRead(Long notificationId, Long employeeId) {
        Employee e = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new RuntimeException("Notification not found"));

        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new RuntimeException("Notification not found"));
        Account account = e.getAccount();

        if (notification.getAccount().contains(account)) {
            notification.setIsRead(true);
            notificationRepository.save(notification);
        }
    }


}
